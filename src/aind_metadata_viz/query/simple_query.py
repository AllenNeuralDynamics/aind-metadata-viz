"""Simple metadata queries generated by form"""

import panel as pn
import param

from aind_metadata_viz.query.database import (
    get_modalities,
    get_project_names,
    get_session_types,
    get_subject_ids,
)
from aind_metadata_viz.query.viewer import QueryViewer
from aind_metadata_viz.utils import FIXED_WIDTH


class QueryBuilder(param.Parameterized):
    """Class for generating simple metadata queries"""

    project_name = param.String(default="", allow_None=True)
    subject_ids = param.List(default=[], allow_None=True)
    modalities = param.List(default=[], allow_None=True)
    session_types = param.List(default=[], allow_None=True)
    queries = param.List(default=[])

    def __init__(self, **params):
        super().__init__(**params)
        self.query_viewer = QueryViewer({})
        self.project_name_selector = pn.widgets.Select(
            name="DataDescription.project_name",
            options=[""] + get_project_names(),  # Add empty string option
            value=self.project_name,
        )
        self.subject_id_selector = pn.widgets.MultiChoice(
            name="Subject.subject_id",
            options=[""] + get_subject_ids(None),  # Add empty string option
            value=self.subject_ids,
            disabled=True,
        )
        self.modality_selector = pn.widgets.MultiChoice(
            name="DataDescription.modality",
            options=[""] + get_modalities(None),  # Add empty string option
            value=self.modalities,
            disabled=True,
        )
        self.session_type_selector = pn.widgets.MultiChoice(
            name="Session.session_type",
            options=[""] + get_session_types(None),  # Add empty string option
            value=[],
            width=500,
            disabled=True,
        )

        self.project_name_selector.link(self, value="project_name")
        self.subject_id_selector.link(self, value="subject_ids")
        self.modality_selector.link(self, value="modalities")
        self.session_type_selector.link(self, value="session_types")

        self.query_button = pn.widgets.Button(
            name="Submit query",
            button_type="primary",
        )
        pn.bind(self.save_query, self.query_button, watch=True)

    def options_panel(self):
        """Create the options panel for the query"""

        selector_col = pn.Column(
            pn.Row(
                self.project_name_selector,
                self.subject_id_selector,
                self.modality_selector,
            ),
            pn.Row(
                self.session_type_selector,
            ),
            width=FIXED_WIDTH - 220,
        )

        submit_col = pn.Column(
            self.query_button,
            width=150,
        )

        return pn.Row(selector_col, submit_col)

    @pn.depends("project_name", watch=True)
    def update_subject_id_options(self):
        """Clear the subject ID value and change options"""

        if self.project_name != "":
            # update subject ID options
            self.subject_id_selector.options = get_subject_ids(
                self.project_name
            )
            self.subject_id_selector.disabled = False
        else:
            # reset subject ID options
            self.subject_id_selector.options = []
            self.subject_id_selector.disabled = True

        self.subject_id_selector.value = []
        self.subject_ids = []

    @pn.depends("project_name", watch=True)
    def update_modality_options(self):
        """Clear the modality value and change options"""

        if self.project_name != "":
            # update modality options
            self.modality_selector.options = get_modalities(self.project_name)
            self.modality_selector.disabled = False
        else:
            # reset modality options
            self.modality_selector.options = []
            self.modality_selector.disabled = True

        self.modality_selector.value = []
        self.modalities = []

    @pn.depends("project_name", watch=True)
    def update_session_type_options(self):
        """Clear the session type value and change options"""

        if self.project_name != "":
            # update session type options
            self.session_type_selector.options = get_session_types(
                self.project_name
            )
            self.session_type_selector.disabled = False
        else:
            # reset session type options
            self.session_type_selector.options = []
            self.session_type_selector.disabled = True

        self.session_type_selector.value = []
        self.session_types = []

    @pn.depends(
        "project_name",
        "subject_ids",
        "modalities",
        "session_types",
        watch=True,
    )
    def update_query_panel(self):
        """Update the query panel content dynamically"""
        self.query_button.disabled = False
        query_dict = {"_name": f"Query {len(self.queries) + 1}"}

        if self.project_name != "":
            query_dict["data_description.project_name"] = self.project_name

        if self.subject_ids != []:
            query_dict["subject.subject_id"] = {"$in": self.subject_ids}

        if self.modalities != []:
            query_dict["data_description.modality.abbreviation"] = {
                "$in": self.modalities
            }

        if self.session_types != []:
            query_dict["session.session_type"] = {"$in": self.session_types}

        self.query_viewer.update(query_dict)

        if len(query_dict.keys()) <= 1:
            self.query_button.disabled = True
            self.query_button.name = "Cannot submit empty query"
            self.query_button.button_type = "danger"
        else:
            self.query_button.name = "Submit query"
            self.query_button.disabled = False
            self.query_button.button_type = "primary"

    def save_query(self, _):
        """Store the current query in the queries list"""
        self.queries = self.queries + [self.query_viewer.query_pane.object]
        self.query_button.disabled = True

    def panel(self):
        """Return the full panel"""
        return pn.Column(
            self.options_panel(),
            pn.pane.Markdown("## Query"),
            self.query_viewer.panel(),
            width=FIXED_WIDTH,
        )
